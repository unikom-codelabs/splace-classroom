// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum TypeQuiz {
  Multiple
  Essay
  Mixed
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  name      String?
  role      Role     @default(STUDENT)
  class_id  Int?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  class     Classes? @relation(fields: [class_id], references: [id])
  user_course User_course[]
  user_quiz User_quiz[]
  discustions Discustions[]
  vote      Vote[]
  comments  Comments[]
  like_comments LikeComments[]
  discustion_bookmark DiscustionBookmark[]
  

}

model Course {
  id        Int      @id @default(autoincrement())
  name      String
  
  azure_index_name String  
  azure_indexer_name String
  azure_container_name String
  azure_datasource_name String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  resource Resource[]
  quiz Quiz[]
  user_course User_course[]

}

model Resource {
  id                Int      @id @default(autoincrement())
  name              String
  description       String
  path              String
  user_id           Int
  course_id         Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  course            Course @relation(fields: [course_id], references: [id])
}
model Quiz {
  id        Int      @id @default(autoincrement())
  name      String
  type      TypeQuiz 
  course_id Int
  question  Json @default("[]")
  answer    Json @default("[]")
  deadline  DateTime 
  duration  Int @default(0)
  start_at DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  course   Course @relation(fields: [course_id], references: [id])
  user_quiz User_quiz[]

}
model Classes {
  id        Int      @id @default(autoincrement())
  name      String    @unique
  users    User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

}
model User_course {
  id        Int      @id @default(autoincrement())
  user_id   Int
  course_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  users    User @relation(fields: [user_id], references: [id])
  course   Course @relation(fields: [course_id], references: [id])

}
model User_quiz {
  id        Int      @id @default(autoincrement())
  user_id   Int
  quiz_id   Int
  score     Int
  answer    Json @default("[]")
  duration Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  users    User @relation(fields: [user_id], references: [id])
  quiz   Quiz @relation(fields: [quiz_id], references: [id])

}
enum DISCUSTION_TYPE {
  DRAFT
  PUBLISHED
  ARCHIVED
}
model Discustions {
  id        Int      @id @default(autoincrement())
  user_id   Int
  tags      Json @default("[]")
  content   String
  shere_count Int @default(0)
  type      DISCUSTION_TYPE @default(DRAFT)
  attachments Json @default("[]")
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  user      User @relation(fields: [user_id], references: [id])
  votes      Vote[]
  comments  Comments[]
  discustion_bookmark DiscustionBookmark[]
}

enum VOTE_TYPE {
  UPVOTE
  DOWNVOTE
}
model Vote {
  id        Int      @id @default(autoincrement())
  user_id   Int
  discustion_id Int
  type      VOTE_TYPE @default(UPVOTE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user      User @relation(fields: [user_id], references: [id])
  discustions Discustions @relation(fields: [discustion_id], references: [id])
}

model Comments {
  id        Int      @id @default(autoincrement())
  discustion_id Int
  user_id   Int
  content   String
  reply_id  Int? @unique
  is_pin    Boolean @default(false)
  attachments Json @default("[]")
  created_at DateTime @default(now())
  deleted_at DateTime?
  user      User @relation(fields: [user_id], references: [id])
  discustions Discustions @relation(fields: [discustion_id], references: [id])
  like_comments LikeComments[]
  reply Comments? @relation("repliesComments", fields: [reply_id], references: [id])
  replies Comments[] @relation("repliesComments")
}

model LikeComments {
  id        Int      @id @default(autoincrement())
  user_id   Int
  comment_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user      User @relation(fields: [user_id], references: [id])
  comments Comments @relation(fields: [comment_id], references: [id])
}

model DiscustionBookmark {
  id        Int      @id @default(autoincrement())
  user_id   Int
  discustion_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user      User @relation(fields: [user_id], references: [id])
  discustions Discustions @relation(fields: [discustion_id], references: [id])
}

model Setting{
  id Int @id @default(autoincrement())
  project_name String
  university_name String
  logo String
  banner String 
  description String
  color Json @default("[]")
  contact_us Json @default("[]")
}